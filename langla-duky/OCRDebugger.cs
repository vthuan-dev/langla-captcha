using System;
using System.Drawing;
using System.IO;
using System.Linq;
using langla_duky.Models;
using Tesseract;

namespace langla_duky
{
    /// <summary>
    /// OCR Debugger - Test OCR ri√™ng bi·ªát tr∆∞·ªõc khi t√≠ch h·ª£p v√†o game
    /// </summary>
    public class OCRDebugger
    {
        private TesseractCaptchaReader _captchaReader;
        private string _testImagesFolder = "test_image";
        private string _debugOutputFolder = "ocr_debug_output";

        public OCRDebugger()
        {
            // Kh·ªüi t·∫°o OCR reader
            _captchaReader = new TesseractCaptchaReader("./tessdata", "eng");
            
            // T·∫°o th∆∞ m·ª•c test n·∫øu ch∆∞a c√≥
            if (!Directory.Exists(_testImagesFolder))
            {
                Directory.CreateDirectory(_testImagesFolder);
                Console.WriteLine($"üìÅ ƒê√£ t·∫°o th∆∞ m·ª•c test: {_testImagesFolder}");
                Console.WriteLine("üí° H√£y copy c√°c h√¨nh ·∫£nh captcha v√†o th∆∞ m·ª•c n√†y ƒë·ªÉ test");
            }
            
            if (!Directory.Exists(_debugOutputFolder))
            {
                Directory.CreateDirectory(_debugOutputFolder);
                Console.WriteLine($"üìÅ ƒê√£ t·∫°o th∆∞ m·ª•c debug output: {_debugOutputFolder}");
            }
        }

        /// <summary>
        /// Test OCR v·ªõi t·∫•t c·∫£ h√¨nh ·∫£nh trong th∆∞ m·ª•c test
        /// </summary>
        public void TestAllImages()
        {
            Console.WriteLine("üîç B·∫Øt ƒë·∫ßu test OCR v·ªõi t·∫•t c·∫£ h√¨nh ·∫£nh...");
            
            var imageFiles = Directory.GetFiles(_testImagesFolder, "*.png")
                .Concat(Directory.GetFiles(_testImagesFolder, "*.jpg"))
                .Concat(Directory.GetFiles(_testImagesFolder, "*.bmp"))
                .ToArray();

            if (imageFiles.Length == 0)
            {
                Console.WriteLine("‚ùå Kh√¥ng t√¨m th·∫•y h√¨nh ·∫£nh n√†o trong th∆∞ m·ª•c test!");
                Console.WriteLine($"üìÅ Th∆∞ m·ª•c: {Path.GetFullPath(_testImagesFolder)}");
                return;
            }

            Console.WriteLine($"üì∏ T√¨m th·∫•y {imageFiles.Length} h√¨nh ·∫£nh ƒë·ªÉ test");

            int successCount = 0;
            int totalCount = imageFiles.Length;

            foreach (var imagePath in imageFiles)
            {
                Console.WriteLine($"\n{new string('=', 50)}");
                Console.WriteLine($"üñºÔ∏è Testing: {Path.GetFileName(imagePath)}");
                Console.WriteLine($"üìç Path: {imagePath}");
                
                var result = TestSingleImage(imagePath);
                if (result.IsSuccess)
                {
                    successCount++;
                    Console.WriteLine($"‚úÖ SUCCESS: '{result.Result}'");
                }
                else
                {
                    Console.WriteLine($"‚ùå FAILED: {result.ErrorMessage}");
                }
            }

            Console.WriteLine($"\n{new string('=', 50)}");
            Console.WriteLine($"üìä K·∫æT QU·∫¢ T·ªîNG QUAN:");
            Console.WriteLine($"‚úÖ Th√†nh c√¥ng: {successCount}/{totalCount}");
            Console.WriteLine($"‚ùå Th·∫•t b·∫°i: {totalCount - successCount}/{totalCount}");
            Console.WriteLine($"üìà T·ª∑ l·ªá th√†nh c√¥ng: {(double)successCount / totalCount * 100:F1}%");
        }

        /// <summary>
        /// Test OCR v·ªõi m·ªôt h√¨nh ·∫£nh c·ª• th·ªÉ
        /// </summary>
        public OCRTestResult TestSingleImage(string imagePath)
        {
            try
            {
                if (!File.Exists(imagePath))
                {
                    return new OCRTestResult
                    {
                        IsSuccess = false,
                        ErrorMessage = $"File kh√¥ng t·ªìn t·∫°i: {imagePath}"
                    };
                }

                // Load h√¨nh ·∫£nh
                using (var originalImage = new Bitmap(imagePath))
                {
                    Console.WriteLine($"üìè K√≠ch th∆∞·ªõc h√¨nh ·∫£nh: {originalImage.Width}x{originalImage.Height}");
                    
                    // Test v·ªõi h√¨nh ·∫£nh g·ªëc
                    Console.WriteLine("üîç Testing v·ªõi h√¨nh ·∫£nh g·ªëc...");
                    string originalResult = _captchaReader.ReadCaptcha(originalImage);
                    Console.WriteLine($"üìù K·∫øt qu·∫£ g·ªëc: '{originalResult}'");
                    
                    // Test v·ªõi c√°c ph∆∞∆°ng ph√°p x·ª≠ l√Ω kh√°c nhau
                    var preprocessingResults = TestWithPreprocessing(originalImage, Path.GetFileNameWithoutExtension(imagePath));
                    
                    // T√¨m k·∫øt qu·∫£ t·ªët nh·∫•t
                    var bestResult = FindBestResult(originalResult, preprocessingResults);
                    
                    return new OCRTestResult
                    {
                        IsSuccess = !string.IsNullOrEmpty(bestResult) && _captchaReader.IsValidCaptcha(bestResult),
                        Result = bestResult,
                        ErrorMessage = string.IsNullOrEmpty(bestResult) ? "Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c text" : "OK",
                        AllResults = preprocessingResults.Prepend(originalResult).ToArray()
                    };
                }
            }
            catch (Exception ex)
            {
                return new OCRTestResult
                {
                    IsSuccess = false,
                    ErrorMessage = $"L·ªói: {ex.Message}"
                };
            }
        }

        /// <summary>
        /// Test v·ªõi c√°c ph∆∞∆°ng ph√°p x·ª≠ l√Ω h√¨nh ·∫£nh kh√°c nhau
        /// </summary>
        private string[] TestWithPreprocessing(Bitmap originalImage, string baseFileName)
        {
            var results = new List<string>();
            var methods = new (string methodName, Func<Bitmap> preprocessingFunc)[]
            {
                ("Enhanced Preprocessing", () => ScreenCapture.PreprocessCaptchaImage(originalImage)),
                ("Pink/Magenta Isolation", () => ScreenCapture.IsolatePinkMagentaText(originalImage)),
                ("Grayscale + Threshold", () => {
                    var gray = ScreenCapture.ConvertToGrayscale(originalImage);
                    var threshold = ScreenCapture.ApplyThreshold(gray, 150);
                    gray.Dispose();
                    return threshold;
                }),
                ("Scale 2x", () => ScreenCapture.ScaleImage(originalImage, 2.0f)),
                ("Scale 3x", () => ScreenCapture.ScaleImage(originalImage, 3.0f)),
                ("Scale 4x", () => ScreenCapture.ScaleImage(originalImage, 4.0f)),
                ("Adaptive Threshold", () => {
                    var gray = ScreenCapture.ConvertToGrayscale(originalImage);
                    var threshold = ScreenCapture.ApplyAdaptiveThreshold(gray);
                    gray.Dispose();
                    return threshold;
                })
            };

            foreach (var method in methods)
            {
                try
                {
                    Console.WriteLine($"üîß Testing {method.methodName}...");
                    
                    using (var processedImage = method.preprocessingFunc())
                    {
                        // L∆∞u h√¨nh ·∫£nh ƒë√£ x·ª≠ l√Ω ƒë·ªÉ debug
                        string debugPath = Path.Combine(_debugOutputFolder, $"{baseFileName}_{method.methodName.Replace(" ", "_")}.png");
                        processedImage.Save(debugPath);
                        Console.WriteLine($"üíæ Saved: {debugPath}");
                        
                        // Test OCR
                        string result = _captchaReader.ReadCaptcha(processedImage);
                        Console.WriteLine($"üìù Result: '{result}'");
                        
                        results.Add(result);
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"‚ùå Error in {method.methodName}: {ex.Message}");
                    results.Add(string.Empty);
                }
            }

            return results.ToArray();
        }

        /// <summary>
        /// T√¨m k·∫øt qu·∫£ t·ªët nh·∫•t t·ª´ c√°c ph∆∞∆°ng ph√°p kh√°c nhau
        /// </summary>
        private string FindBestResult(string originalResult, string[] preprocessingResults)
        {
            var allResults = preprocessingResults.Prepend(originalResult).ToArray();
            
            // ∆Øu ti√™n k·∫øt qu·∫£ h·ª£p l·ªá (4 k√Ω t·ª±)
            foreach (var result in allResults)
            {
                if (!string.IsNullOrEmpty(result) && _captchaReader.IsValidCaptcha(result))
                {
                    return result;
                }
            }
            
            // N·∫øu kh√¥ng c√≥ k·∫øt qu·∫£ h·ª£p l·ªá, tr·∫£ v·ªÅ k·∫øt qu·∫£ kh√¥ng r·ªóng ƒë·∫ßu ti√™n
            foreach (var result in allResults)
            {
                if (!string.IsNullOrEmpty(result))
                {
                    return result;
                }
            }
            
            return string.Empty;
        }

        /// <summary>
        /// Test v·ªõi m·ªôt h√¨nh ·∫£nh t·ª´ clipboard ho·∫∑c ƒë∆∞·ªùng d·∫´n c·ª• th·ªÉ
        /// </summary>
        public void TestSpecificImage(string imagePath)
        {
            Console.WriteLine($"üîç Testing h√¨nh ·∫£nh c·ª• th·ªÉ: {imagePath}");
            
            var result = TestSingleImage(imagePath);
            
            Console.WriteLine($"\n{new string('=', 50)}");
            Console.WriteLine($"üìä K·∫æT QU·∫¢:");
            Console.WriteLine($"‚úÖ Th√†nh c√¥ng: {result.IsSuccess}");
            Console.WriteLine($"üìù K·∫øt qu·∫£: '{result.Result}'");
            Console.WriteLine($"üìã T·∫•t c·∫£ k·∫øt qu·∫£: [{string.Join(", ", result.AllResults.Select(r => $"'{r}'"))}]");
            
            if (!result.IsSuccess)
            {
                Console.WriteLine($"‚ùå L·ªói: {result.ErrorMessage}");
            }
        }

        /// <summary>
        /// T·∫°o h√¨nh ·∫£nh test m·∫´u
        /// </summary>
        public void CreateSampleTestImages()
        {
            Console.WriteLine("üé® T·∫°o h√¨nh ·∫£nh test m·∫´u...");
            
            var samples = new[]
            {
                ("Sample1", "A1B2"),
                ("Sample2", "C3D4"),
                ("Sample3", "E5F6"),
                ("Sample4", "G7H8")
            };

            foreach (var (name, text) in samples)
            {
                CreateSampleImage(name, text);
            }
            
            Console.WriteLine($"‚úÖ ƒê√£ t·∫°o {samples.Length} h√¨nh ·∫£nh m·∫´u trong th∆∞ m·ª•c {_testImagesFolder}");
        }

        private void CreateSampleImage(string name, string text)
        {
            try
            {
                int width = 200;
                int height = 80;
                
                using (var bitmap = new Bitmap(width, height))
                using (var graphics = Graphics.FromImage(bitmap))
                {
                    // Background tr·∫Øng
                    graphics.Clear(Color.White);
                    
                    // V·∫Ω text m√†u h·ªìng/magenta
                    using (var font = new Font("Arial", 24, FontStyle.Bold))
                    using (var brush = new SolidBrush(Color.Magenta))
                    {
                        var textSize = graphics.MeasureString(text, font);
                        float x = (width - textSize.Width) / 2;
                        float y = (height - textSize.Height) / 2;
                        
                        graphics.DrawString(text, font, brush, x, y);
                    }
                    
                    // Th√™m noise ƒë·ªÉ gi·ªëng captcha th·∫≠t
                    var random = new Random();
                    for (int i = 0; i < 50; i++)
                    {
                        int x = random.Next(width);
                        int y = random.Next(height);
                        Color noiseColor = Color.FromArgb(128, random.Next(256), random.Next(256), random.Next(256));
                        bitmap.SetPixel(x, y, noiseColor);
                    }
                    
                    string filePath = Path.Combine(_testImagesFolder, $"{name}.png");
                    bitmap.Save(filePath);
                    Console.WriteLine($"üíæ Created: {filePath}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå Error creating {name}: {ex.Message}");
            }
        }

        public void Dispose()
        {
            _captchaReader?.Dispose();
        }
    }

    /// <summary>
    /// K·∫øt qu·∫£ test OCR
    /// </summary>
    public class OCRTestResult
    {
        public bool IsSuccess { get; set; }
        public string Result { get; set; } = string.Empty;
        public string ErrorMessage { get; set; } = string.Empty;
        public string[] AllResults { get; set; } = Array.Empty<string>();
    }
}
