using System;
using System.Drawing;
using System.IO;
using langla_duky.Models;

namespace langla_duky
{
    /// <summary>
    /// Simple OCR Test - Test OCR ƒë∆°n gi·∫£n v·ªõi debug chi ti·∫øt
    /// </summary>
    public class SimpleOCRTest
    {
        public static void RunSimpleTest()
        {
            Console.WriteLine("üîç SIMPLE OCR TEST");
            Console.WriteLine("==================");
            Console.WriteLine($"Working Directory: {Directory.GetCurrentDirectory()}");
            Console.WriteLine();

            try
            {
                // T√¨m h√¨nh ·∫£nh
                string imagePath = "test_image/ocr-1.png";
                Console.WriteLine($"üîç Checking: {imagePath}");
                
                if (!File.Exists(imagePath))
                {
                    Console.WriteLine("‚ùå Image not found!");
                    return;
                }
                
                Console.WriteLine($"‚úÖ Found: {imagePath}");

                // T·∫°o th∆∞ m·ª•c debug
                string debugFolder = "ocr_debug_output";
                if (!Directory.Exists(debugFolder))
                {
                    Directory.CreateDirectory(debugFolder);
                    Console.WriteLine($"üìÅ Created: {Path.GetFullPath(debugFolder)}");
                }

                // Load h√¨nh ·∫£nh
                Console.WriteLine($"üì∑ Loading image: {imagePath}");
                using (var image = new Bitmap(imagePath))
                {
                    Console.WriteLine($"üìè Image size: {image.Width}x{image.Height}");
                    
                    // L∆∞u h√¨nh ·∫£nh g·ªëc
                    string originalPath = Path.Combine(debugFolder, "simple_original.png");
                    image.Save(originalPath);
                    Console.WriteLine($"üíæ Saved original: {originalPath}");
                    
                    // Test OCR tr·ª±c ti·∫øp
                    Console.WriteLine("üî§ Testing OCR directly...");
                    TestOCRDirectly(image, debugFolder);
                }
                
                Console.WriteLine("‚úÖ Simple test completed!");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå Error: {ex.Message}");
                Console.WriteLine($"üìã Stack: {ex.StackTrace}");
            }
        }
        
        private static void TestOCRDirectly(Bitmap image, string debugFolder)
        {
            try
            {
                Console.WriteLine("üî§ Initializing Tesseract OCR engine...");
                
                // Test v·ªõi TesseractCaptchaReader
                using (var reader = new TesseractCaptchaReader("tessdata", "eng"))
                {
                    Console.WriteLine("‚úÖ Tesseract engine initialized");
                    
                    // Th·ª±c hi·ªán OCR
                    Console.WriteLine("üîç Reading text from image...");
                    string recognizedText = reader.ReadCaptcha(image);
                    
                    // Hi·ªÉn th·ªã k·∫øt qu·∫£
                    Console.WriteLine();
                    Console.WriteLine("üìù OCR RESULT üìù");
                    Console.WriteLine("================");
                    if (!string.IsNullOrEmpty(recognizedText))
                    {
                        Console.WriteLine($"‚úÖ Recognized text: \"{recognizedText}\"");
                        
                        // L∆∞u k·∫øt qu·∫£ v√†o file
                        string resultPath = Path.Combine(debugFolder, "simple_ocr_result.txt");
                        File.WriteAllText(resultPath, recognizedText);
                        Console.WriteLine($"üíæ OCR result saved to: {resultPath}");
                    }
                    else
                    {
                        Console.WriteLine("‚ùå No text recognized or OCR failed");
                        
                        // L∆∞u th√¥ng tin debug
                        string debugPath = Path.Combine(debugFolder, "simple_debug.txt");
                        string debugInfo = $"OCR failed to recognize any text\n" +
                                          $"Image size: {image.Width}x{image.Height}\n" +
                                          $"Timestamp: {DateTime.Now}\n" +
                                          $"TessData path: tessdata\n" +
                                          $"Language: eng";
                        File.WriteAllText(debugPath, debugInfo);
                        Console.WriteLine($"üíæ Debug info saved to: {debugPath}");
                    }
                    Console.WriteLine("================");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå OCR Error: {ex.Message}");
                if (ex.InnerException != null)
                {
                    Console.WriteLine($"‚ùå Inner error: {ex.InnerException.Message}");
                }
                Console.WriteLine($"üìã Stack trace: {ex.StackTrace}");
                
                // L∆∞u error info
                string errorPath = Path.Combine(debugFolder, "simple_error.txt");
                string errorInfo = $"OCR Error: {ex.Message}\n" +
                                  $"Inner Error: {ex.InnerException?.Message}\n" +
                                  $"Stack Trace: {ex.StackTrace}\n" +
                                  $"Timestamp: {DateTime.Now}";
                File.WriteAllText(errorPath, errorInfo);
                Console.WriteLine($"üíæ Error info saved to: {errorPath}");
            }
        }
    }
}
