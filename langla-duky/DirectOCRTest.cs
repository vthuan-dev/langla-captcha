using System;
using System.Drawing;
using System.IO;
using langla_duky.Models;

namespace langla_duky
{
    /// <summary>
    /// Direct OCR Test - Test tr·ª±c ti·∫øp v·ªõi h√¨nh ·∫£nh ocr-1.png
    /// </summary>
    public class DirectOCRTest
    {
        public static void RunDirectTest()
        {
            Console.WriteLine("üîç DIRECT OCR TEST");
            Console.WriteLine("==================");
            Console.WriteLine("Test OCR tr·ª±c ti·∫øp v·ªõi h√¨nh ·∫£nh ocr-1.png");
            Console.WriteLine();

            try
            {
                // ƒê∆∞·ªùng d·∫´n h√¨nh ·∫£nh - t√¨m t·ª´ nhi·ªÅu v·ªã tr√≠ c√≥ th·ªÉ
                string[] possibleImagePaths = {
                    "test_image/ocr-1.png",  // T·ª´ project root
                    "../../../test_image/ocr-1.png",  // T·ª´ bin/Debug/net8.0-windows
                    "../../test_image/ocr-1.png"  // Fallback
                };
                
                string? imagePath = null;
                foreach (var path in possibleImagePaths)
                {
                    if (File.Exists(path))
                    {
                        imagePath = path;
                        break;
                    }
                }
                
                if (imagePath == null)
                {
                    Console.WriteLine($"‚ùå Kh√¥ng t√¨m th·∫•y h√¨nh ·∫£nh test ·ªü b·∫•t k·ª≥ v·ªã tr√≠ n√†o:");
                    foreach (var path in possibleImagePaths)
                    {
                        Console.WriteLine($"   - {path}");
                    }
                    return;
                }
                
                if (!File.Exists(imagePath))
                {
                    Console.WriteLine($"‚ùå Kh√¥ng t√¨m th·∫•y h√¨nh ·∫£nh: {imagePath}");
                    return;
                }

                Console.WriteLine($"‚úÖ T√¨m th·∫•y h√¨nh ·∫£nh: {imagePath}");
                
                // Load h√¨nh ·∫£nh, s·ª≠ d·ª•ng using ƒë·ªÉ ƒë·∫£m b·∫£o r·∫±ng h√¨nh ·∫£nh ƒë∆∞·ª£c ƒë√≥ng sau khi s·ª≠ d·ª•ng
                using (var image = new Bitmap(imagePath))
                {
                    Console.WriteLine($"üìè K√≠ch th∆∞·ªõc h√¨nh ·∫£nh: {image.Width}x{image.Height}");
                    
                    // T·∫°o th∆∞ m·ª•c debug output - s·ª≠ d·ª•ng ƒë∆∞·ªùng d·∫´n t∆∞∆°ng ƒë·ªëi t·ª´ project root
                    string debugFolder = "ocr_debug_output";
                    if (!Directory.Exists(debugFolder))
                    {
                        Directory.CreateDirectory(debugFolder);
                        Console.WriteLine($"üìÅ ƒê√£ t·∫°o th∆∞ m·ª•c: {Path.GetFullPath(debugFolder)}");
                    }
                    else
                    {
                        Console.WriteLine($"üìÅ Th∆∞ m·ª•c ƒë√£ t·ªìn t·∫°i: {Path.GetFullPath(debugFolder)}");
                    }
                    
                    // Kh·ªüi t·∫°o OCR reader
                    Console.WriteLine("üîß Kh·ªüi t·∫°o Tesseract OCR...");
                    Console.WriteLine($"üìÅ Tessdata path: {Path.GetFullPath("./tessdata")}");
                    
                    // Ki·ªÉm tra tessdata tr∆∞·ªõc
                    string[] possibleTessdataPaths = {
                        "./tessdata",
                        "../../../tessdata",
                        "../../tessdata"
                    };
                    
                    string? tessdataPath = null;
                    foreach (var path in possibleTessdataPaths)
                    {
                        Console.WriteLine($"üîç Checking tessdata: {path}");
                        if (Directory.Exists(path))
                        {
                            tessdataPath = path;
                            Console.WriteLine($"‚úÖ Found tessdata: {Path.GetFullPath(path)}");
                            break;
                        }
                    }
                    
                    if (tessdataPath == null)
                    {
                        Console.WriteLine("‚ùå Kh√¥ng t√¨m th·∫•y tessdata!");
                        return;
                    }
                    
                    try
                    {
                        using (var ocrReader = new TesseractCaptchaReader(tessdataPath, "eng"))
                        {
                            Console.WriteLine("‚úÖ OCR Reader ƒë√£ s·∫µn s√†ng");
                        
                        // Test v·ªõi h√¨nh ·∫£nh g·ªëc
                        Console.WriteLine("\nüîç Testing v·ªõi h√¨nh ·∫£nh g·ªëc...");
                        try
                        {
                            string originalResult = ocrReader.ReadCaptcha(image);
                            Console.WriteLine($"üìù K·∫øt qu·∫£ g·ªëc: '{originalResult}'");
                            Console.WriteLine($"‚úÖ H·ª£p l·ªá: {ocrReader.IsValidCaptcha(originalResult)}");
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine($"‚ùå L·ªói OCR g·ªëc: {ex.Message}");
                        }
                        
                        // Test v·ªõi c√°c ph∆∞∆°ng ph√°p x·ª≠ l√Ω kh√°c nhau
                        Console.WriteLine("\nüîß Testing v·ªõi c√°c ph∆∞∆°ng ph√°p x·ª≠ l√Ω...");
                        
                        TestMethod("Enhanced Preprocessing", () => ScreenCapture.PreprocessCaptchaImage(image), ocrReader, debugFolder);
                        TestMethod("Pink/Magenta Isolation", () => ScreenCapture.IsolatePinkMagentaText(image), ocrReader, debugFolder);
                        TestMethod("Grayscale + Threshold", () => {
                            var gray = ScreenCapture.ConvertToGrayscale(image);
                            var threshold = ScreenCapture.ApplyThreshold(gray, 150);
                            gray.Dispose();
                            return threshold;
                        }, ocrReader, debugFolder);
                        TestMethod("Scale 2x", () => ScreenCapture.ScaleImage(image, 2.0f), ocrReader, debugFolder);
                        TestMethod("Scale 3x", () => ScreenCapture.ScaleImage(image, 3.0f), ocrReader, debugFolder);
                        TestMethod("Scale 4x", () => ScreenCapture.ScaleImage(image, 4.0f), ocrReader, debugFolder);
                        TestMethod("Adaptive Threshold", () => {
                            var gray = ScreenCapture.ConvertToGrayscale(image);
                            var threshold = ScreenCapture.ApplyAdaptiveThreshold(gray);
                            gray.Dispose();
                            return threshold;
                        }, ocrReader, debugFolder);
                        
                        Console.WriteLine("\nüìä T·ªîNG K·∫æT:");
                        Console.WriteLine("=============");
                        Console.WriteLine($"üñºÔ∏è H√¨nh ·∫£nh: {Path.GetFileName(imagePath)}");
                        Console.WriteLine($"üìè K√≠ch th∆∞·ªõc: {image.Width}x{image.Height}");
                        Console.WriteLine($"üìÅ Debug folder: {Path.GetFullPath(debugFolder)}");
                        
                        // Ki·ªÉm tra files ƒë√£ t·∫°o
                        var debugFiles = Directory.GetFiles(debugFolder);
                        Console.WriteLine($"üì∏ Files debug ƒë√£ t·∫°o: {debugFiles.Length}");
                        foreach (var file in debugFiles)
                        {
                            Console.WriteLine($"   - {Path.GetFileName(file)}");
                        }
                        }
                    }
                    catch (Exception ocrEx)
                    {
                        Console.WriteLine($"‚ùå L·ªói kh·ªüi t·∫°o OCR: {ocrEx.Message}");
                        Console.WriteLine($"üìã Stack trace: {ocrEx.StackTrace}");
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå L·ªói t·ªïng th·ªÉ: {ex.Message}");
                Console.WriteLine($"üìã Stack trace: {ex.StackTrace}");
            }
        }
        
        static void TestMethod(string methodName, Func<Bitmap> preprocessingFunc, TesseractCaptchaReader ocrReader, string debugFolder)
        {
            try
            {
                Console.WriteLine($"üîß Testing {methodName}...");
                
                using (var processedImage = preprocessingFunc())
                {
                    // L∆∞u h√¨nh ·∫£nh ƒë√£ x·ª≠ l√Ω ƒë·ªÉ debug
                    string debugPath = Path.Combine(debugFolder, $"ocr-1_{methodName.Replace(" ", "_").Replace("/", "_")}.png");
                    
                    try
                    {
                        processedImage.Save(debugPath);
                        Console.WriteLine($"   üíæ Saved: {debugPath}");
                    }
                    catch (Exception saveEx)
                    {
                        Console.WriteLine($"   ‚ùå L·ªói l∆∞u file: {saveEx.Message}");
                        return;
                    }
                    
                    // Test OCR
                    try
                    {
                        string result = ocrReader.ReadCaptcha(processedImage);
                        bool isValid = ocrReader.IsValidCaptcha(result);
                        
                        Console.WriteLine($"   üìù K·∫øt qu·∫£: '{result}'");
                        Console.WriteLine($"   ‚úÖ H·ª£p l·ªá: {isValid}");
                    }
                    catch (Exception ocrEx)
                    {
                        Console.WriteLine($"   ‚ùå L·ªói OCR: {ocrEx.Message}");
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"   ‚ùå L·ªói t·ªïng th·ªÉ: {ex.Message}");
                Console.WriteLine($"   üìã Stack trace: {ex.StackTrace}");
            }
        }
    }
}
